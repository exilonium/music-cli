#!/bin/sh

version_number="1.0.0"

# UI Functions (adapted from ani-cli)
external_menu() {
    if [ -n "$external_menu_args" ]; then
        # Use custom rofi arguments (user-defined args override defaults)
        eval "rofi $external_menu_args -sort -dmenu -i -p \"$2\""
    else
        # Use default rofi arguments
        rofi "$1" -sort -dmenu -i -width 1500 -p "$2" "$3"
    fi
}

launcher() {
    [ "$use_external_menu" = "0" ] && [ -z "$1" ] && set -- "+m" "$2"
    [ "$use_external_menu" = "0" ] && fzf "$1" --reverse --cycle --prompt "$2"
    [ "$use_external_menu" = "1" ] && external_menu "$1" "$2" "$external_menu_args"
}

nth() {
    stdin=$(cat -)
    [ -z "$stdin" ] && return 1
    line_count="$(printf "%s\n" "$stdin" | wc -l | tr -d "[:space:]")"
    [ "$line_count" -eq 1 ] && printf "%s" "$stdin" | cut -f2- && return 0
    prompt="$1"
    multi_flag=""
    [ $# -ne 1 ] && shift && multi_flag="$1"
    line=$(printf "%s" "$stdin" | cut -f1,3- | tr '\t' ' ' | launcher "$multi_flag" "$prompt" | cut -d " " -f 1)
    [ -n "$line" ] || exit 1
    printf "%s" "$stdin" | grep -E '^'"${line}"'($|[[:space:]])' | cut -f2- || exit 1
}

die() {
    printf "\33[2K\r\033[1;31m%s\033[0m\n" "$*" >&2
    exit 1
}

help_info() {
    printf "
    Usage:
    %s [options] [query]

    Options:
      -c, --continue
        Continue playing from history
      -d, --download
        Download the song instead of playing it
      -df, --download-force
       Force download a song (if it already exists)
      -D, --delete
        Delete history
      -q, --quality
        Specify audio quality (128/320, default: 320)
      -b, --background
        Play in background (default is foreground)
      -l, --loop
        Loop current track
      -y, --youtube
        Force YouTube search instead of JioSaavn
      -f, --fallback
        Enable YouTube fallback (default: enabled)
      --no-fallback
        Disable YouTube fallback
      -r, --radio [station]
        Play radio station continuously (Pop, Jazz, Rock, Romance, etc.)
        Staion Name is case sensitive,if no name is passed, the script will fetch automatically and list
      -R, --record
        Record while playing (saves stream to file using mpv cache)
      --rofi
        Use rofi instead of fzf
      --rofi-args \"arguments\"
        Use rofi with custom arguments (automatically enables --rofi)
        Example: --rofi-args \"-theme gruvbox-dark -font 'JetBrains Mono 12'\"
      -h, --help
        Show this help
      -v, --version
        Show version
      -P, --yt-playlist "link"
        plays a playlist from yt
      -U, --update
        update this script


    Examples:
      %s believer
      %s -q 320 houdini
      %s -b -l sugar crash
      %s -d imagine dragons
      %s -y never gonna give you up
    \n" "${0##*/}" "${0##*/}" "${0##*/}" "${0##*/}" "${0##*/}" "${0##*/}"
    exit 0
}

version_info() {
    printf "%s\n" "$version_number"
    exit 0
}

update_script() {
    remote="$(curl -s -A "$agent" "https://raw.githubusercontent.com/exilonium/music-cli/main/music-cli")" || die "Connection error"
    diff_output="$(printf '%s\n' "$remote" | diff -u "$0" -)"

    if [ -z "$diff_output" ]; then
        printf "Script is up to date :)\n"
    else
        if [ "$update" = "1" ]; then
            # auto-update
            if printf '%s\n' "$diff_output" | patch "$0" -; then
                printf "Script has been updated\n"
            else
                die "Can't update for some reason!"
            fi
            exit 0
        else
            # ask user
            printf "An update is available. Apply it now? (N/y): "
            read -r answer
            case "$answer" in
                [yY])
                    if printf '%s\n' "$diff_output" | patch "$0" -; then
                        printf "Script has been updated\n"
                    else
                        die "Can't update for some reason!"
                    fi
                    exit 0
                    ;;
                *)
                    printf "Update skipped.\n"
                    ;;
            esac
        fi
    fi
}


dep_ch() {
    for dep; do
        command -v "${dep%% *}" >/dev/null || die "Program \"${dep%% *}\" not found. Please install it."
    done
}

# YOUTUBE FUNCTIONS
search_youtube() {
    query="$1"

    # Use yt-dlp to search YouTube and get results
    yt-dlp --quiet --no-warnings --flat-playlist --print "%(id)s	%(title)s	%(uploader)s	%(duration)s" "ytsearch20:$query" 2>/dev/null |
        head -20 | nl -w2 -s$'\t' | sed 's/^[[:space:]]*//'
}

play_youtube_playlist() {
    playlist_url="$1"
    quality="$2"

    # Get all video IDs from playlist
    mapfile -t video_ids < <(yt-dlp --flat-playlist --get-id "$playlist_url" 2>/dev/null)

    if [ ${#video_ids[@]} -eq 0 ]; then
        die "No videos found in playlist!"
    fi

    printf "\033[1;34mFound %d videos in playlist.\033[0m\n" "${#video_ids[@]}"

    for vid in "${video_ids[@]}"; do
        video_id="$vid"
        song_id="yt_${vid}"
        use_youtube=1
        song_url="https://www.youtube.com/watch?v=$vid"

        # Fetch metadata (optional, to display title/artist)
        song_info=$(yt-dlp --get-title "https://www.youtube.com/watch?v=$vid" 2>/dev/null)
        [ -z "$song_info" ] && song_info="Unknown Title"
        
        # Split title to get artist and song (if format is "Artist - Title")
        if printf '%s' "$song_info" | grep -q " - "; then
            artist_name=${song_info%% - *}
            song_title=${song_info#* - }
        else
            artist_name="Unknown Artist"
            song_title="$song_info"
        fi

        printf "\033[1;32mPlaying:\033[0m %s\n" "$song_info"
        play_song
    done
}

get_radio_stations() {
    curl -s 'https://www.jiosaavn.com/api.php?__call=webradio.getFeaturedStations&api_version=4&_format=json&_marker=0&ctx=web6dot0&languages=english' |
        jq -r '.[] | objects | .id | select(. != null and . != "")' 2>/dev/null
}

select_radio_station() {
    station_param="$1"
    
    if [ -z "$station_param" ]; then
        # No parameter - show menu of available stations
        stations=$(get_radio_stations)
        
        if [ -z "$stations" ]; then
            printf "Pop\nJazz\nRock\nHip Hop\nBlues" # fallback options
        else
            printf '%s\n' "$stations"
        fi | nth "Select radio station: "
    else
        printf "%s" "$station_param"
    fi
}

play_radio() {
    station_name=$(select_radio_station "$1")
    [ -z "$station_name" ] && exit 1
    
    printf "\033[1;32mStarting %s radio...\033[0m\n" "$station_name"
    
    # Convert spaces to + for URL encoding
    encoded_station=$(printf '%s' "$station_name" | sed 's/ /+/g')
    
    # Create radio station - try direct station name first
    printf "\033[1;34mCreating radio station...\033[0m\n"
    station_id=$(curl -s "https://www.jiosaavn.com/api.php?language=english&query=&name=$encoded_station&mode=&artistid=&api_version=4&_format=json&_marker=0&ctx=web6dot0&__call=webradio.createFeaturedStation" | 
        jq -r '.stationid // empty' 2>/dev/null)
    
    [ -z "$station_id" ] && die "Failed to create radio station for: $station_name"
    
    printf "\033[1;34mRadio station created. Playing continuously... (Ctrl+C to stop)\033[0m\n"
    
    # Radio loop
    next=1
    consecutive_failures=0
    
    while true; do
        # Get songs batch
        songs=$(curl -s "https://www.jiosaavn.com/api.php?__call=webradio.getSong&stationid=$station_id&k=20&next=$next&api_version=4&_format=json&_marker=0&ctx=web6dot0" | 
            jq -r '.[] | objects | .song | "\(.id)\t\(.title)\t\(.more_info.artistMap.primary_artists[0].name // "Unknown Artist")\t\(.more_info.encrypted_media_url // "")"' 2>/dev/null)
        
        if [ -z "$songs" ]; then
            consecutive_failures=$((consecutive_failures + 1))
            if [ $consecutive_failures -gt 3 ]; then
                die "Radio stream failed multiple times. Exiting."
            fi
            printf "\033[1;33mNo songs received, retrying... (attempt %d/3)\033[0m\n" "$consecutive_failures"
            next=1  # Reset to beginning
            sleep 2
            continue
        fi
        
        # Reset failure counter on success
        consecutive_failures=0
        
        # Play each song
        printf '%s\n' "$songs" | while IFS=$'\t' read -r song_id song_title artist_name encrypted_url; do
            [ -z "$song_id" ] || [ -z "$encrypted_url" ] && continue
            
            album_title="$station_name Radio"
            
            printf "\033[1;32m📻 Now Playing:\033[0m %s - %s\n" "$artist_name" "$song_title"
            
            # Get song URL
            song_url=$(get_song_url "$encrypted_url" "$quality")
            
            if [ -z "$song_url" ]; then
                printf "\033[1;33mSkipping song (no URL available)\033[0m\n"
                continue
            fi
            use_youtube=0
            # Play the song
            play_song
            # Update history
            update_history
            unset song_url
        done
        
        next=$((next + 1))
    done
}
# MUSIC API FUNCTIONS
search_music() {
    query="$1"

    # URL encode the query
    encoded_query=$(printf '%s' "$query" | sed 's/ /+/g')

    response=$(curl -s "https://www.jiosaavn.com/api.php?p=1&q=$encoded_query&_format=json&_marker=0&api_version=4&ctx=web6dot0&n=20&__call=search.getResults")

    printf '%s' "$response" | jq -r '.results[]? | [.id, .title, (.more_info.artistMap.primary_artists[0].name // "Unknown Artist"), (.more_info.album // "Unknown Album"), (.more_info.duration // "0")] | @tsv' |
        nl -w2 -s$'\t' | sed 's/^[[:space:]]*//'
}

get_song_details() {
    song_id="$1"

    response=$(curl -s "https://www.jiosaavn.com/api.php?__call=song.getDetails&pids=$song_id&api_version=4&_format=json&_marker=0&ctx=web6dot0")

    printf '%s' "$response" | jq -r '.songs[0]'
}

get_song_url() {
    encrypted_url="$1"
    bitrate="$2"

    # Map bitrate to actual file suffix
    case "$bitrate" in
    12) file_suffix="12" ;;
    48) file_suffix="48" ;;
    96) file_suffix="96" ;;
    160) file_suffix="160" ;;
    320) file_suffix="320" ;;
    *) file_suffix="320" ;;
    esac

    # URL encode the encrypted URL
    encoded_url=$(printf '%s' "$encrypted_url" | sed 's/+/%2B/g;s/=/%3D/g;s/\//%2F/g')

    response=$(curl -s "https://www.jiosaavn.com/api.php?__call=song.generateAuthToken&url=$encoded_url&bitrate=$bitrate&api_version=4&_format=json&ctx=web6dot0&_marker=0")

    auth_url=$(printf '%s' "$response" | jq -r '.auth_url // empty')

    # Convert the URL format
    if [ -n "$auth_url" ]; then
        # Extract the path part and convert web.saavncdn.com to aac.saavncdn.com
        # Remove query parameters and change quality suffix to mapped bitrate
        # converted_url=$(printf '%s' "$auth_url" | sed 's|web\.saavncdn\.com|aac.saavncdn.com|' | sed 's|\?.*||' | sed "s|_[0-9]*\.mp4|_${file_suffix}.mp4|")

        converted_url=$(printf '%s' "$auth_url" \
        | sed -E 's|[^/]*\.saavncdn\.com|aac.saavncdn.com|' \
        | sed 's|\?.*||' \
        | sed "s|_[0-9]*\.mp4|_${file_suffix}.mp4|")
        printf '%s' "$converted_url"
    fi
}

# PLAYER FUNCTIONS
where_mpv() {
    command -v "flatpak" >/dev/null && flatpak info io.mpv.Mpv >/dev/null 2>&1 && printf "%s" "flatpak_mpv" && return 0
    printf "%s" "mpv" && return 0
}

format_duration() {
    duration_sec="$1"
    minutes=$((duration_sec / 60))
    seconds=$((duration_sec % 60))
    printf "%d:%02d" "$minutes" "$seconds"
}

update_history() {
    if grep -q "$song_id" "$histfile"; then
        sed -E "s|^[^	]*	${song_id}	.*$|$(date +%s)	${song_id}	${artist_name} - ${song_title}	${album_title}|" "$histfile" >"${histfile}.new"
    else
        cp "$histfile" "${histfile}.new"
        printf "%s\t%s\t%s\t%s\n" "$(date +%s)" "$song_id" "$artist_name - $song_title" "$album_title" >>"${histfile}.new"
    fi
    mv "${histfile}.new" "$histfile"
}

download_song() {
    song_url="$1"
    filename="$2"

    # Sanitize filename: remove problematic characters
    safe_filename=$(printf '%s' "$filename" | tr '/' '_' | tr '?' '_' | tr '"' '_' | tr '<' '_' | tr '>' '_' | tr '|' '_' | tr '*' '_')
    
    # Determine the output file path and extension
    if [ "$use_youtube" = 1 ]; then
        output_file="$download_dir/$safe_filename.mp3"
    else
        case "$song_url" in
        *.mp4*)
            output_file="$download_dir/$safe_filename.mp4"
            ;;
        *)
            output_file="$download_dir/$safe_filename.mp3"
            ;;
        esac
    fi
    
    # Check if file exists and force_download is not set
    if [ -f "$output_file" ] && [ "${force_download:-0}" != "1" ]; then
        echo "File already exists: $output_file (use -df to overwrite)"
        return 0
    fi
    
    if [ "$use_youtube" = 1 ]; then
        # YouTube downloads via yt-dlp
        yt-dlp --quiet --no-warnings --extract-audio --audio-format mp3 --audio-quality "$quality" \
            -o "$download_dir/$safe_filename.%(ext)s" "$song_url"
    else
        # JioSaavn downloads via aria2c
        case "$song_url" in
        *.mp4*)
            aria2c --check-certificate=false --continue -x 16 -s 16 \
                -d "$download_dir" -o "$safe_filename.mp4" "$song_url" --summary-interval=0 --download-result=hide --quiet=true
            ;;
        *)
            aria2c --check-certificate=false --continue -x 16 -s 16 \
                -d "$download_dir" -o "$safe_filename.mp3" "$song_url" --summary-interval=0 --download-result=hide --quiet=true
            ;;
        esac
    fi
}

play_song() {
    [ -z "$song_url" ] && die "Could not get song URL!"

    # Format song info for display
    if [ "$use_youtube" = 1 ]; then
        printf "\33[2K\r\033[1;32mNow Playing (YouTube):\033[0m %s - %s\n" "$artist_name" "$song_title"
    else
        duration_formatted=$(format_duration $duration)
        printf "\33[2K\r\033[1;32mNow Playing (JioSaavn):\033[0m %s - %s [%s]\n" "$artist_name" "$song_title" "$duration_formatted"
    fi

    case "$player_function" in
    download)
        filename="${artist_name} - ${song_title}"
        filename=$(printf '%s' "$filename" | tr '/' '_' | tr '?' '_' | tr '"' '_' | tr '<' '_' | tr '>' '_' | tr '|' '_' | tr '*' '_')
        download_song "$song_url" "$filename"
        ;;
    mpv*)
        if [ "$play_in_background" = 1 ]; then
            nohup $player_function --no-video --force-media-title="$artist_name - $song_title" --no-sub $loop_flag "$song_url" >/dev/null 2>&1 &
            printf "\33[2K\r\033[1;34mrun 'pkill mpv' to stop...\033[0m\n"
        else
            $player_function --no-video --force-media-title="$artist_name - $song_title" --no-sub  $loop_flag "$song_url"
        fi
        ;;
    flatpak_mpv)
        if [ "$play_in_background" = 1 ]; then
            nohup flatpak run io.mpv.Mpv --no-video --force-media-title="$artist_name - $song_title" --no-sub $loop_flag "$song_url" >/dev/null 2>&1 &
            printf "\33[2K\r\033[1;34mrun 'pkill mpv' to stop...\033[0m\n"
        else
            flatpak run io.mpv.Mpv --no-video --force-media-title="$artist_name - $song_title" --no-sub $loop_flag "$song_url"
        fi
        ;;
    *)
        if [ "$play_in_background" = 1 ]; then
            nohup $player_function "$song_url" >/dev/null 2>&1 &
        else
            $player_function "$song_url"
        fi
        ;;
    esac

    update_history
    unset song_url
}
play_song() {
    [ -z "$song_url" ] && die "Could not get song URL!"

    # Format song info for display
    if [ "$use_youtube" = 1 ]; then
        printf "\33[2K\r\033[1;32mNow Playing (YouTube):\033[0m %s - %s\n" "$artist_name" "$song_title"
    else
        duration_formatted=$(format_duration $duration)
        printf "\33[2K\r\033[1;32mNow Playing (JioSaavn):\033[0m %s - %s [%s]\n" "$artist_name" "$song_title" "$duration_formatted"
    fi

    # If recording is enabled, download first then play the file
    if [ "$record_while_playing" = 1 ]; then
        filename="${artist_name} - ${song_title}"
        filename=$(printf '%s' "$filename" | tr '/' '_' | tr '?' '_' | tr '"' '_' | tr '<' '_' | tr '>' '_' | tr '|' '_' | tr '*' '_')
        
        printf "\33[2K\r\033[1;34m⬇️  Downloading song...\033[0m\n"
        download_song "$song_url" "$filename"
        
        # Find the downloaded file
        if [ "$use_youtube" = 1 ]; then
            downloaded_file="$download_dir/$filename.mp3"
        else
            case "$song_url" in
            *.mp4*) downloaded_file="$download_dir/$filename.mp4" ;;
            *) downloaded_file="$download_dir/$filename.mp3" ;;
            esac
        fi
        
        if [ -f "$downloaded_file" ]; then
            printf "\33[2K\r\033[1;32mDownloaded! Now playing from file...\033[0m\n"
            song_url="$downloaded_file"
        else
            printf "\33[2K\r\033[1;33m⚠️  Download failed, streaming instead...\033[0m\n"
        fi
    fi

    case "$player_function" in
    download)
        filename="${artist_name} - ${song_title}"
        filename=$(printf '%s' "$filename" | tr '/' '_' | tr '?' '_' | tr '"' '_' | tr '<' '_' | tr '>' '_' | tr '|' '_' | tr '*' '_')
        download_song "$song_url" "$filename"
        printf "\33[2K\r\033[1;32mDownload successful or file already exists\n"
        ;;
    mpv*)
        if [ "$play_in_background" = 1 ]; then
            nohup $player_function --no-video --force-media-title="$artist_name - $song_title" --no-sub $loop_flag "$song_url" >/dev/null 2>&1 &
            printf "\33[2K\r\033[1;34mrun 'pkill mpv' to stop...\033[0m\n"
        else
            $player_function --no-video --force-media-title="$artist_name - $song_title" --no-sub $loop_flag "$song_url"
        fi
        ;;
    flatpak_mpv)
        if [ "$play_in_background" = 1 ]; then
            nohup flatpak run io.mpv.Mpv --no-video --force-media-title="$artist_name - $song_title" --no-sub $loop_flag "$song_url" >/dev/null 2>&1 &
            printf "\33[2K\r\033[1;34mrun 'pkill mpv' to stop...\033[0m\n"
        else
            flatpak run io.mpv.Mpv --no-video --force-media-title="$artist_name - $song_title" --no-sub $loop_flag "$song_url"
        fi
        ;;
    *)
        if [ "$play_in_background" = 1 ]; then
            nohup $player_function "$song_url" >/dev/null 2>&1 &
        else
            $player_function "$song_url"
        fi
        ;;
    esac

    update_history
    unset song_url
}
# MAIN LOGIC

# Setup
agent="Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/121.0"
download_dir="${MUSIC_CLI_DOWNLOAD_DIR:-$HOME/Music/music-cli}"
[ ! -d "$download_dir" ] && mkdir -p "$download_dir"
quality="${MUSIC_CLI_QUALITY:-320}"
play_in_background="${MUSIC_CLI_BACKGROUND:-0}"
record_while_playing=0

case "$(uname -s)" in
Darwin*) player_function="${MUSIC_CLI_PLAYER:-afplay}" ;;
*ndroid*) player_function="${MUSIC_CLI_PLAYER:-android_vlc}" ;;
*) player_function="${MUSIC_CLI_PLAYER:-$(where_mpv)}" ;;
esac

force_download=0
update=0

use_external_menu="${MUSIC_CLI_EXTERNAL_MENU:-0}"
external_menu_args="${MUSIC_CLI_ROFI_ARGS:-}"
use_youtube_fallback="${MUSIC_CLI_YOUTUBE_FALLBACK:-1}"
use_youtube=0
loop_enabled=0

hist_dir="${MUSIC_CLI_HIST_DIR:-${XDG_STATE_HOME:-$HOME/.local/state}/music-cli}"
[ ! -d "$hist_dir" ] && mkdir -p "$hist_dir"
histfile="$hist_dir/music-history"
[ ! -f "$histfile" ] && : >"$histfile"

# Parse arguments
while [ $# -gt 0 ]; do
    case "$1" in
    -q | --quality)
        [ $# -lt 2 ] && die "missing argument! 
            try below
            320 - Higest quality 
            160 - Medium quality
            96 - Decent quality
            48 - Potato quality
            12 - Are you sure about that?"
        quality="$2"
        shift
        ;;
    -y | --youtube) use_youtube=1 ;;
    -f | --fallback) use_youtube_fallback=1 ;;
    --no-fallback) use_youtube_fallback=0 ;;
    -b | --background) play_in_background=1 ;;
    -l | --loop)
        loop_enabled=1
        loop_flag="--loop"
        ;;
    -d | --download) player_function="download" ;;
    -df | --download-force) 
        player_function="download" 
        force_download=1
        ;;
    -D | --delete)
        : >"$histfile"
        printf "History cleared!\n"
        exit 0
        ;;
    -c | --continue)
        # Load from history
        if [ -s "$histfile" ]; then
            last_song=$(tail -n1 "$histfile")

            # history format: index <tab> song_id <tab> "Artist - Title" <tab> Album
            song_id=$(printf '%s' "$last_song" | cut -f2)
            song_info=$(printf '%s' "$last_song" | cut -f3)
            album_title=$(printf '%s' "$last_song" | cut -f4)

            # safer split: artist and title
            artist_name=${song_info%% - *}
            song_title=${song_info#* - }

            if [[ "$song_id" == yt_* ]]; then
                use_youtube=1
                video_id=${song_id#yt_}
                song_url="https://www.youtube.com/watch?v=$video_id"

                printf "\033[1;32mResuming:\033[0m %s\n" "$song_info"
                play_song
                exit 0
            else
                printf "\033[1;34mGetting song details...\033[0m\n"
                song_details=$(get_song_details "$song_id") || die "Failed to get song details!"
                encrypted_url=$(jq -r '.more_info.encrypted_media_url // empty' <<<"$song_details")
                duration=$(jq -r '.more_info.duration // "0"' <<<"$song_details")

                [ -z "$encrypted_url" ] && die "Could not get song details!"

                printf "\033[1;34mGetting song URL...\033[0m\n"
                song_url=$(get_song_url "$encrypted_url" "$quality") || die "Failed to get song URL!"

                printf "\033[1;32mResuming:\033[0m %s\n" "$song_info"
                play_song
                exit 0
            fi
        else
            die "No history found!"
        fi
        ;;
    -R | --record)
        record_while_playing=1
        ;;
    -r | --radio)
        if [ $# -gt 1 ] && [ "${2#-}" = "$2" ]; then
            shift
            radio_station="$1"
        fi
        
        printf "\033[1;34mChecking dependencies...\033[0m\n"
        dep_ch "curl" "jq"
        case "$player_function" in
            *android*) ;;
            flatpak_mpv) ;;
            *) dep_ch "$player_function" ;;
        esac
        
        play_radio "$radio_station"
        exit 0
        ;;
    --rofi) use_external_menu=1 ;;
    --rofi-args)
        [ $# -lt 2 ] && die "missing argument for --rofi-args!"
        use_external_menu=1
        external_menu_args="$2"
        shift
        ;;
    -P | --yt-playlist)
        shift
        playlist_url="$1"
        use_youtube=1
        [ -z "$playlist_url" ] && die "Missing YouTube playlist URL!"

        printf "\033[1;34mLoading YouTube playlist...\033[0m\n"
        play_youtube_playlist "$playlist_url" "$quality"
        exit 0
        ;;
    -v | --version) version_info ;;
    -h | --help) help_info ;;
    -U | --update) update=1;;
    -*) die "Unknown option: $1" ;;
    *) query="$(printf "%s" "$query $1" | sed "s|^ ||")" ;;
    esac
    shift
done

# Check dependencies
printf "\33[2K\r\033[1;34mChecking dependencies...\033[0m\n"
dep_ch "curl" "jq" || true
[ "$use_external_menu" = "0" ] && dep_ch "fzf" || true
[ "$use_external_menu" = "1" ] && dep_ch "rofi" || true
[ "$use_youtube_fallback" = 1 ] || [ "$use_youtube" = 1 ] && dep_ch "yt-dlp" || true
case "$player_function" in
download)
    if [ "$use_youtube" = 1 ]; then
        dep_ch "yt-dlp"
    else
        dep_ch "aria2c"
    fi
    ;;
*android*) ;;
flatpak_mpv) ;;
*) dep_ch "$player_function" ;;
esac

# Update the script
update_script

# Get search query if not provided
if [ "$use_external_menu" = "0" ]; then
    while [ -z "$query" ]; do
        printf "\33[2K\r\033[1;36mSearch music: \033[0m" && read -r query
    done
else
    [ -z "$query" ] && query=$(printf "" | external_menu "" "Search music: ")
    [ -z "$query" ] && exit 1
fi

# Search and select
if [ "$use_youtube" = 1 ]; then
    printf "\33[2K\r\033[1;34mSearching YouTube...\033[0m\n"
    results=$(search_youtube "$query")
    [ -z "$results" ] && die "No YouTube results found!"

    selected=$(printf '%s' "$results" | nth "Select song: ")
    [ -z "$selected" ] && exit 1

    # Parse YouTube result
    video_id=$(printf '%s' "$selected" | cut -f1)
    song_title=$(printf '%s' "$selected" | cut -f2)
    artist_name=$(printf '%s' "$selected" | cut -f3)
    duration=$(printf '%s' "$selected" | cut -f4)
    album_title="YouTube"
    song_id="yt_$video_id"
    song_url="https://www.youtube.com/watch?v=$video_id"

else
    printf "\33[2K\r\033[1;34mSearching JioSaavn...\033[0m\n"
    results=$(search_music "$query")

    if [ -z "$results" ] && [ "$use_youtube_fallback" = 1 ]; then
        printf "\33[2K\r\033[1;33mJioSaavn search failed, trying YouTube...\033[0m\n"
        results=$(search_youtube "$query")
        [ -z "$results" ] && die "No results found on JioSaavn or YouTube!"
        use_youtube=1

        selected=$(printf '%s' "$results" | nth "Select song: ")
        [ -z "$selected" ] && exit 1

        # Parse YouTube result
        video_id=$(printf '%s' "$selected" | cut -f1)
        song_title=$(printf '%s' "$selected" | cut -f2)
        artist_name=$(printf '%s' "$selected" | cut -f3)
        duration=$(printf '%s' "$selected" | cut -f4)
        album_title="YouTube"
        song_id="yt_$video_id"
        song_url="https://www.youtube.com/watch?v=$video_id"

    elif [ -z "$results" ]; then
        die "No results found!"
    else
        selected=$(printf '%s' "$results" | nth "Select song: ")
        [ -z "$selected" ] && exit 1

        # Parse JioSaavn result
        song_id=$(printf '%s' "$selected" | cut -f1)
        song_title=$(printf '%s' "$selected" | cut -f2)
        artist_name=$(printf '%s' "$selected" | cut -f3)
        album_title=$(printf '%s' "$selected" | cut -f4)
        duration=$(printf '%s' "$selected" | cut -f5)

        # Get song details and URL
        printf "\33[2K\r\033[1;34mGetting song details...\033[0m\n"
        song_details=$(get_song_details "$song_id")
        encrypted_url=$(printf '%s' "$song_details" | jq -r '.more_info.encrypted_media_url // empty')

        if [ -z "$encrypted_url" ] && [ "$use_youtube_fallback" = 1 ]; then
            printf "\33[2K\r\033[1;33mJioSaavn failed, trying YouTube...\033[0m\n"
            results=$(search_youtube "$query")
            [ -z "$results" ] && die "No results found on JioSaavn or YouTube!"

            selected=$(printf '%s' "$results" | nth "Select song: ")
            [ -z "$selected" ] && exit 1

            use_youtube=1
            video_id=$(printf '%s' "$selected" | cut -f1)
            song_title=$(printf '%s' "$selected" | cut -f2)
            artist_name=$(printf '%s' "$selected" | cut -f3)
            duration=$(printf '%s' "$selected" | cut -f4)
            album_title="YouTube"
            song_id="yt_$video_id"
            song_url="https://www.youtube.com/watch?v=$video_id"
        else
            [ -z "$encrypted_url" ] && die "Could not get song details!"

            printf "\33[2K\r\033[1;34mGetting song URL...\033[0m\n"
            song_url=$(get_song_url "$encrypted_url" "$quality")
        fi
    fi
fi

# Play the song
play_song

# Interactive menu for foreground playbook
if [ "$play_in_background" = 0 ] && [ "$player_function" != "download" ]; then
    while true; do
        # Determine the other source name for the menu based on current source
        if [ "$use_youtube" = 1 ]; then
            other_source="re-search jiosaavn"
        else
            other_source="re-search youtube"
        fi
        
        cmd=$(printf "replay\ndownload\n%s\nquit" "$other_source" | nth "Song finished. What next? ")
        case "$cmd" in
        replay)
            if [ "$use_youtube" = 1 ]; then
                song_url="https://www.youtube.com/watch?v=$video_id"
            else
                song_url=$(get_song_url "$encrypted_url" "$quality")
            fi
            play_song
            ;;
        download)
            if [ "$use_youtube" = 1 ]; then
                song_url="https://www.youtube.com/watch?v=$video_id"
            else
                song_url=$(get_song_url "$encrypted_url" "$quality")
            fi
            old_player_function="$player_function"
            player_function="download"
            play_song
            player_function="$old_player_function"
            ;;
        "search other source"|"search jiosaavn"|"search youtube")
            # Search on the opposite source with current song title
            search_query="$song_title"
            
            if [ "$use_youtube" = 1 ]; then
                # Currently on YouTube, search JioSaavn
                printf "\33[2K\r\033[1;34mSearching JioSaavn for: %s...\033[0m\n" "$search_query"
                alt_results=$(search_music "$search_query")
                
                if [ -z "$alt_results" ]; then
                    printf "\033[1;31mNo results found on JioSaavn!\033[0m\n"
                    continue
                fi
                
                alt_selected=$(printf '%s' "$alt_results" | nth "Select JioSaavn song: ")
                [ -z "$alt_selected" ] && continue
                
                # Parse JioSaavn result
                song_id=$(printf '%s' "$alt_selected" | cut -f1)
                song_title=$(printf '%s' "$alt_selected" | cut -f2)
                artist_name=$(printf '%s' "$alt_selected" | cut -f3)
                album_title=$(printf '%s' "$alt_selected" | cut -f4)
                duration=$(printf '%s' "$alt_selected" | cut -f5)
                use_youtube=0
                
                # Get song details and URL
                printf "\033[1;34mGetting song details...\033[0m\n"
                song_details=$(get_song_details "$song_id")
                encrypted_url=$(printf '%s' "$song_details" | jq -r '.more_info.encrypted_media_url // empty')
                [ -z "$encrypted_url" ] && { printf "\033[1;31mFailed to get song details!\033[0m\n"; continue; }
                
                printf "\033[1;34mGetting song URL...\033[0m\n"
                song_url=$(get_song_url "$encrypted_url" "$quality")
                [ -z "$song_url" ] && { printf "\033[1;31mFailed to get song URL!\033[0m\n"; continue; }
                
            else
                # Currently on JioSaavn, search YouTube
                printf "\33[2K\r\033[1;34mSearching YouTube for: %s...\033[0m\n" "$search_query"
                alt_results=$(search_youtube "$search_query")
                
                if [ -z "$alt_results" ]; then
                    printf "\033[1;31mNo results found on YouTube!\033[0m\n"
                    continue
                fi
                
                alt_selected=$(printf '%s' "$alt_results" | nth "Select YouTube song: ")
                [ -z "$alt_selected" ] && continue
                
                # Parse YouTube result
                video_id=$(printf '%s' "$alt_selected" | cut -f1)
                song_title=$(printf '%s' "$alt_selected" | cut -f2)
                artist_name=$(printf '%s' "$alt_selected" | cut -f3)
                duration=$(printf '%s' "$alt_selected" | cut -f4)
                album_title="YouTube"
                song_id="yt_$video_id"
                use_youtube=1
                song_url="https://www.youtube.com/watch?v=$video_id"
            fi
            
            play_song
            ;;
        *) exit 0 ;;
        esac
    done
fi

printf "\33[2K\r\033[1;32mDone!\033[0m\n"
